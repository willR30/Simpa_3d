/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.simpa3d;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    // Registros y memoria
    private Map<String, Integer> registros = new HashMap<>();
    private Map<Integer, Integer> memoria = new HashMap<>();

    public View() {
        initComponents();

        registros.put("R1", 0);
        registros.put("R2", 0);
        registros.put("R3", 0);

        memoria.put(0, 10);
        memoria.put(1, 20);
        memoria.put(2, 30);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_editor = new javax.swing.JTextArea();
        panel_inferior = new javax.swing.JPanel();
        btn_validar = new javax.swing.JButton();
        btn_ejecutar = new javax.swing.JButton();
        btn_cargar = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_editor.setColumns(20);
        txt_editor.setRows(5);
        jScrollPane1.setViewportView(txt_editor);

        panel_inferior.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout panel_inferiorLayout = new javax.swing.GroupLayout(panel_inferior);
        panel_inferior.setLayout(panel_inferiorLayout);
        panel_inferiorLayout.setHorizontalGroup(
            panel_inferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_inferiorLayout.setVerticalGroup(
            panel_inferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        btn_validar.setText("Validar");
        btn_validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_validarActionPerformed(evt);
            }
        });

        btn_ejecutar.setText("Ejecutar");
        btn_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecutarActionPerformed(evt);
            }
        });

        btn_cargar.setText("Cargar");
        btn_cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cargarActionPerformed(evt);
            }
        });

        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_inferior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_validar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_ejecutar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cargar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_guardar)
                .addContainerGap(626, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_validar)
                    .addComponent(btn_ejecutar)
                    .addComponent(btn_cargar)
                    .addComponent(btn_guardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_inferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("Editor", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("DISEÑO DE CONJUNTO DE INSTRUCCIONES PARA EL SIMULADOR\n\n1. **Instrucciones de Transferencia de Datos**:\n   - `LOAD Rd, Src`: Carga el valor de la fuente `Src` en el registro de destino `Rd`.\n   - `STORE Src, Rd`: Almacena el valor de la fuente `Rd` en la ubicación de memoria especificada por `Src`.\n\n2. **Instrucciones de Aritmética y Lógica**:\n   - `ADD Rd, Op1, Op2`: Suma los valores de las fuentes `Op1` y `Op2` y almacena el resultado en el registro de destino `Rd`.\n   - `SUB Rd, Op1, Op2`: Resta el valor de la fuente `Op2` del valor de la fuente `Op1` y almacena el resultado en el registro de destino `Rd`.\n   - `MUL Rd, Op1, Op2`: Multiplica los valores de las fuentes `Op1` y `Op2` y almacena el resultado en el registro de destino `Rd`.\n   - `DIV Rd, Op1, Op2`: Divide el valor de la fuente `Op1` por el valor de la fuente `Op2` y almacena el resultado en el registro de destino `Rd`.\n\n3. **Instrucciones de Salto Básicas**:\n   - Se pueden implementar instrucciones de salto (como saltos condicionales o incondicionales) según las necesidades, pero en este conjunto de instrucciones básico, no se incluyen instrucciones de salto.\n\n4. **Instrucciones de Entrada/Salida**:\n  -PRINT Mem[n] , imprime el valor de memoria en esa dirección en pantalla\n\nCada instrucción sigue un formato general: `OPERACIÓN DESTINO, FUENTE1, FUENTE2`, donde `OPERACIÓN` es la operación a realizar, `DESTINO` es el registro de destino y `FUENTE1` y `FUENTE2` son las fuentes de datos. Las fuentes de datos pueden ser registros (`R1`, `R2`, `R3`) o ubicaciones de memoria (`Mem[A]`, `Mem[B]`, `Mem[C]`).\n\nEste conjunto de instrucciones permite cargar, almacenar y realizar operaciones aritméticas en registros y memoria. Puedes ampliarlo según tus necesidades específicas.");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Instrucciones", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 982, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Acerca de", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean conjuntoInstruccionesCorrecto(String codigo) {
        // Define el patrón para validar las instrucciones.
        String patron = "(LOAD|STORE|ADD|SUB|MUL|DIV)\\s(R[1-3]|Mem\\[[A-C\\]]),";

        String[] lineas = codigo.split("\\n");
        Pattern pattern = Pattern.compile(patron);

        for (String linea : lineas) {
            Matcher matcher = pattern.matcher(linea);
            if (!matcher.find()) {
                return false;
            }
        }

        return true;
    }
    private void btn_validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_validarActionPerformed
        // TODO add your handling code here:
        System.out.println(conjuntoInstruccionesCorrecto(this.txt_editor.getText()));

        if (conjuntoInstruccionesCorrecto(this.txt_editor.getText())) {
            JOptionPane.showMessageDialog(rootPane, "La Sintaxis Está Correcta");
        } else {
            JOptionPane.showMessageDialog(rootPane, "La Sintaxis Está Incorrecta");
        }

    }//GEN-LAST:event_btn_validarActionPerformed

    private void btn_cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cargarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Leer el contenido del archivo de texto y mostrarlo en el campo de texto
                BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(selectedFile), StandardCharsets.UTF_8));
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
                reader.close();
                this.txt_editor.setText(content.toString());
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, ex);
            }
        }
    }//GEN-LAST:event_btn_cargarActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Obtener el contenido del área de texto
                String content = this.txt_editor.getText();

                // Crear y escribir el contenido en el archivo seleccionado
                BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile, StandardCharsets.UTF_8));
                writer.write(content);
                writer.close();

                JOptionPane.showMessageDialog(this, "Guardado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecutarActionPerformed
        // Programa con instrucciones
        String[] program = {
            "LOAD R1 Mem[0] R1",
            "LOAD R2 Mem[1] R2",
            "LOAD R3 Mem[2] R3",
            "ADD R3 R1 R2",
            "SUB R1 R1 R1",
            "STORE Men[0] R1",
            "MUL R1 R2 R3",
            "PRINT Men[0]"
        };

        for (String instruction : program) {
            //dividimos la instruccion en diferentes lineas
            ejecutarInstruccion(instruction);
            // Imprimir estado después de la ejecución
            imprimirEstado();
            //dentro de cada linea obtenemos los parámetros
        }
    }//GEN-LAST:event_btn_ejecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void processInstruction(String instruction) {
        /*
    recibimos la linea de la instrucción, 
    el primer elemento el el nombre de la instrucción que pueden ser:
    LOAD, ADD, RES, MUL, DIV
         */
        // Separar la línea de instrucción por espacios
        String[] parts = instruction.split("\\s+");

        //iteramos cada componente de la instrucción
        for (String part : parts) {
            //aqui hacemos el procesamiento de la instruccion una por una 
            System.out.println(part);
        }
    }

    public static String extraerNumeroAndReturnAsStr(String cadena) {
        // Define el patrón para encontrar números en la cadena
        Pattern patron = Pattern.compile("\\d+");

        // Crea un objeto Matcher para buscar el patrón en la cadena
        Matcher matcher = patron.matcher(cadena);

        // Encuentra la primera coincidencia y extrae el número
        if (matcher.find()) {
            String numeroStr = matcher.group(); // Obtiene la cadena que coincide con el patrón
            return numeroStr;
        } else {
            // Si no se encuentra ningún número, devuelve un valor predeterminado o lanza una excepción
            throw new IllegalArgumentException("No se encontró ningún número en la cadena.");
        }
    }
// Función para interpretar y ejecutar una instrucción

    public void ejecutarInstruccion(String instruccion) {
        // Separar la instrucción en partes utilizando espacios como delimitadores
        String[] partes = instruccion.split("\\s+");

        // Verificar si la instrucción es de carga (LOAD)
        if (partes.length == 4 && partes[0].equals("LOAD")) {
            String registroDestino = partes[1];
            String direccionMemoria = partes[2];
            String registroTemporal = partes[3];

            // Obtener valor desde la memoria
            int valor = memoria.get(Integer.parseInt(direccionMemoria.substring(4, direccionMemoria.length() - 1)));

            // Almacenar el valor en el registro de destino
            registros.put(registroDestino, valor);

            // Opcional: Almacenar el valor en el registro temporal
            registros.put(registroTemporal, valor);
        } // Verificar si la instrucción es de suma (ADD)
        else if (partes.length == 4 && partes[0].equals("ADD")) {
            String registroDestino = partes[1];
            String registroFuente1 = partes[2];
            String registroFuente2 = partes[3];

            // Obtener valores desde los registros
            int valor1 = registros.get(registroFuente1);
            int valor2 = registros.get(registroFuente2);

            // Realizar la suma y almacenar en el registro de destino
            registros.put(registroDestino, valor1 + valor2);

        }//verifcamos la instruccion de la resta  (SUB)
        else if (partes.length == 4 && partes[0].equals("SUB")) {
            String registroDestino = partes[1];
            String registroFuente1 = partes[2];
            String registroFuente2 = partes[3];

            // Obtener valores desde los registros
            int valor1 = registros.get(registroFuente1);
            int valor2 = registros.get(registroFuente2);

            // Realizar la resta y almacenar en el registro de destino
            registros.put(registroDestino, valor1 - valor2);
        } //Validamos la multiplicacion de los valores
        else if (partes.length == 4 && partes[0].equals("MUL")) {
            String registroDestino = partes[1];
            String registroFuente1 = partes[2];
            String registroFuente2 = partes[3];

            // Obtener valores desde los registros
            int valor1 = registros.get(registroFuente1);
            int valor2 = registros.get(registroFuente2);

            // Realizar la resta y almacenar en el registro de destino
            registros.put(registroDestino, valor1 * valor2);
        } //Validamos la division de los valores indicados en el codigo
        else if (partes.length == 4 && partes[0].equals("DIV")) {
            String registroDestino = partes[1];
            String registroFuente1 = partes[2];
            String registroFuente2 = partes[3];

            // Obtener valores desde los registros
            int valor1 = registros.get(registroFuente1);
            int valor2 = registros.get(registroFuente2);

            // Realizar la resta y almacenar en el registro de destino
            registros.put(registroDestino, valor1 / valor2);
        } //validamos guardar en memoria lo que se ha escrito en las direcciones
        else if (partes.length == 3 && partes[0].equals("STORE")) {
            String registroFuente = partes[2];
            //String direccionMemoria = partes[1].substring(4, partes[2].length() - 1); // Obtener la dirección de memoria
            String direccionMemoria = extraerNumeroAndReturnAsStr(partes[1]);

            // Obtener el valor desde el registro y almacenarlo en la memoria
            int valor = registros.get(registroFuente);
            memoria.put(Integer.parseInt(direccionMemoria), valor);
        } //implementamos las funcion de mostrar en pantalla
        else if (partes.length == 2 && partes[0].equals("PRINT")) {
            String direccionMemoria =  extraerNumeroAndReturnAsStr(partes[1]);

            // Obtener el valor almacenado en la memoria en la dirección especificada
            int valor = memoria.get(Integer.parseInt(direccionMemoria));

            // Imprimir el valor en la consola o realizar la acción correspondiente
            System.out.println("Valor en Mem[" + direccionMemoria + "]: " + valor);
            
        } else {
            // Manejar otros tipos de instrucciones si es necesario
            System.out.println("Instrucción no reconocida: " + instruccion);
        }
    }

    // Función para imprimir el estado actual de registros y memoria
    public void imprimirEstado() {
        System.out.println("Registros: " + registros);
        System.out.println("Memoria: " + memoria);
        System.out.println("-------------------------");
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cargar;
    private javax.swing.JButton btn_ejecutar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_validar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel panel_inferior;
    private javax.swing.JTextArea txt_editor;
    // End of variables declaration//GEN-END:variables
}
